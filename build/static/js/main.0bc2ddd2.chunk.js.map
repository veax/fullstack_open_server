{"version":3,"sources":["PersonService.js","components/SearchFilter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","res","data","person","post","id","put","delete","SearchFilter","handleSearch","type","onChange","PersonForm","addPerson","handlePersonInput","onSubmit","name","value","number","Persons","filteredPersons","handleDeletion","map","key","onClick","Notification","message","className","text","App","useState","persons","setPersons","newPerson","setNewPerson","filterQuery","setFilterQuery","setMessage","popupMessage","setTimeout","popupAddPersonMessage","popupPersonNotExistsError","useEffect","personService","filter","p","toLowerCase","includes","e","target","preventDefault","existingPerson","find","window","confirm","changedPerson","catch","err","alert","concat","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bc2ddd2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAllPersons = () => {\r\n  return axios.get(baseUrl).then((res) => res.data);\r\n};\r\n\r\nconst addPerson = (person) => {\r\n  return axios.post(baseUrl, person).then((res) => res.data);\r\n};\r\n\r\nconst updatePerson = (id, person) => {\r\n  return axios.put(`${baseUrl}/${id}`, person).then((res) => res.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAllPersons,\r\n  addPerson,\r\n  updatePerson,\r\n  deletePerson,\r\n};\r\n","import React from \"react\";\r\n\r\nconst SearchFilter = ({ handleSearch }) => (\r\n  <div>\r\n    filter shown with <input type=\"text\" onChange={handleSearch} />\r\n  </div>\r\n);\r\n\r\nexport default SearchFilter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({ addPerson, handlePersonInput, person }) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <div>\r\n        name: <input onChange={handlePersonInput} name=\"name\" value={person.name} />\r\n      </div>\r\n      <div>\r\n        number:{' '}\r\n        <input type=\"number\" name=\"number\" value={person.number} onChange={handlePersonInput} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Persons = ({ filteredPersons, handleDeletion }) => (\r\n  <>\r\n    {filteredPersons.map((person) => (\r\n      <div key={person.name}>\r\n        <p>\r\n          {person.name} {person.number}\r\n        </p>\r\n        <button onClick={() => handleDeletion(person)}>delete</button>\r\n      </div>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={`${message.type} notification`}>{message.text}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\r\nimport personService from './PersonService';\r\nimport SearchFilter from './components/SearchFilter';\r\nimport PersonForm from './components/PersonForm';\r\nimport Persons from './components/Persons';\r\nimport Notification from './components/Notification';\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newPerson, setNewPerson] = useState({ name: '', number: '' });\r\n  const [filterQuery, setFilterQuery] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const popupMessage = () => {\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const popupAddPersonMessage = (name) => {\r\n    let message = {\r\n      text: `Added ${name}`,\r\n      type: 'success',\r\n    };\r\n    setMessage(message);\r\n    popupMessage();\r\n  };\r\n\r\n  const popupPersonNotExistsError = (name) => {\r\n    let message = {\r\n      text: `Information of ${name} has already been removed from server`,\r\n      type: 'error',\r\n    };\r\n    setMessage(message);\r\n    popupMessage();\r\n  };\r\n\r\n  useEffect(() => {\r\n    personService.getAllPersons().then((persons) => {\r\n      setPersons(persons);\r\n    });\r\n  }, []);\r\n\r\n  const filteredPersons = persons.filter((p) => p.name.toLowerCase().includes(filterQuery));\r\n\r\n  const handleSearch = (e) => {\r\n    setFilterQuery(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const handlePersonInput = (e) => {\r\n    setNewPerson({ ...newPerson, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault();\r\n\r\n    let existingPerson = persons.find((p) => p.name === newPerson.name);\r\n    if (existingPerson) {\r\n      if (\r\n        existingPerson.number != newPerson.number &&\r\n        window.confirm(\r\n          `${newPerson.name} is already added to phonebook, replace the old number with a new one ?`,\r\n        )\r\n      ) {\r\n        personService\r\n          .updatePerson(existingPerson.id, newPerson)\r\n          .then((changedPerson) => {\r\n            setPersons(persons.map((p) => (p.id !== changedPerson.id ? p : changedPerson)));\r\n            setNewPerson({ name: '', number: '' });\r\n            popupAddPersonMessage(changedPerson.name);\r\n          })\r\n          .catch((err) => {\r\n            popupPersonNotExistsError(existingPerson.name);\r\n            setPersons(persons.filter((p) => p.id !== existingPerson.id));\r\n          });\r\n      } else {\r\n        alert(`${newPerson.name} is already in a phonebook`);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const person = {\r\n      name: newPerson.name,\r\n      number: newPerson.number,\r\n    };\r\n\r\n    personService.addPerson(person).then((person) => {\r\n      setPersons(persons.concat(person));\r\n      console.log('person added');\r\n      setNewPerson({ name: '', number: '' });\r\n      popupAddPersonMessage(person.name);\r\n    });\r\n  };\r\n\r\n  const handleDeletion = (person) => {\r\n    if (window.confirm(`delete ${person.name} ?`)) {\r\n      personService\r\n        .deletePerson(person.id)\r\n        .then((res) => setPersons(persons.filter((p) => p.id !== person.id)))\r\n        .catch((err) => {\r\n          popupPersonNotExistsError(person.name);\r\n          setPersons(persons.filter((p) => p.id !== person.id));\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message} />\r\n      <SearchFilter handleSearch={handleSearch} />\r\n      <h4>Add a new:</h4>\r\n      <PersonForm addPerson={addPerson} handlePersonInput={handlePersonInput} person={newPerson} />\r\n      <h2>Phones</h2>\r\n      <Persons filteredPersons={filteredPersons} handleDeletion={handleDeletion} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}